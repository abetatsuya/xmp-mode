(defface xmp-face '((t (:foreground "purple"))) nil)
(defface xmp-directive-face '((t (:foreground "blue"))) nil)
(defface xmp-variable-face '((t (:foreground "SeaGreen"))) nil)
(defface xmp-distribute-face '((t (:foreground "magenta"))) nil)
(defface xmp-function-face '((t (:foreground "red"))) nil)

(defvar xmp-face 'xmp-face)
(defvar xmp-directive-face 'xmp-directive-face)
(defvar xmp-variable-face 'xmp-variable-face)
(defvar xmp-distribute-face 'xmp-distribute-face)
(defvar xmp-function-face 'xmp-function-face)

(defvar xmp-spc "[ \t]")
(defvar xmp-sep (concat xmp-spc "+"))
(defvar xmp-var "[a-zA-Z_]*")
(defvar xmp-var-strict "[a-zA-Z_]+")
(defvar xmp-prg "\\(lock\\|unlock\\|critical\\|sync_memory\\|post\\|async\\|local_alias\\|coarray\\|wait_comm\\|wait_async\\|wait\\|array\\|template_fix\\|nodes\\|template\\|reflect\\|shadow\\|tasks\\|distribute\\|align\\|loop\\|reduction\\|bcast\\|end\\|task\\|gmove\\|barrier\\)")

(defun xmp-head (xmp-start) (concat "^" xmp-spc "*" xmp-start xmp-sep))
(defun xmp-font-lock-keywords (xmp-start xmp-kakko xmp-kokka)
  `(
    (,(concat "\\(" (xmp-head xmp-start) "\\)") 1 xmp-face t)
    (,(concat (xmp-head xmp-start) xmp-prg                                                                                                        ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "gmove"                                                          xmp-sep "\\(in\\|out\\|async\\)"              ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "gmove"                                                          xmp-sep "\\(in\\|out\\)" xmp-sep "\\(async\\)") 2 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "end"                                                            xmp-sep "\\(task\\|critical\\)"               ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "tasks"                                                          xmp-sep "\\(nowait\\)"                        ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "\\(reflect\\|bcast\\)" xmp-sep         "("       ".+" ")"       xmp-sep "\\(async\\)"                         ) 2 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "reflect"               xmp-sep         "("       ".+" ")"       xmp-sep "\\(width\\)"                         ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "distribute"            xmp-sep xmp-var "("       ".+" ")"       xmp-sep "\\(onto\\)"                          ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "\\(barrier\\|task\\|loop\\|array\\)"                            xmp-sep "\\(on\\)"                            ) 2 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "align"                 xmp-sep xmp-var xmp-kakko ".+" xmp-kokka xmp-sep "\\(with\\)"                          ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "reduction"                             "("       ".+" ")"       xmp-sep "\\(on\\)"                            ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "reduction"                             "("       ".+" ")"       xmp-sep "\\(async\\)"                         ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "bcast"                 xmp-sep         "("       ".+" ")"       xmp-sep "\\(from\\)"                          ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "bcast"                 xmp-sep         "("       ".+" ")"       xmp-sep    "from"  xmp-sep xmp-var "(.+)" xmp-sep "\\(on\\)"       ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "loop"                  xmp-sep         "("       ".+" ")"       xmp-sep "\\(on\\)"                                                 ) 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "loop"                  xmp-sep         "("       ".+" ")"       xmp-sep    "on"    xmp-sep xmp-var "(.+)" xmp-sep "\\(reduction\\)") 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "loop"                  xmp-sep                                             "on"    xmp-sep xmp-var "(.+)" xmp-sep "\\(reduction\\)") 1 xmp-directive-face t)
    (,(concat (xmp-head xmp-start) "coarray" xmp-sep xmp-var-strict xmp-sep ":" xmp-sep "\\[.+\\]" xmp-sep "\\(on\\)") 1 xmp-directive-face t)
;    (,(concat (xmp-head xmp-start) "\\(nodes\\|template\\|distribute\\)"                   xmp-sep                      "\\(" xmp-var "\\)") 2 xmp-variable-face t)
;    (,(concat (xmp-head xmp-start) "nodes"                                                 xmp-sep                            xmp-var       "(.*)" xmp-spc "*=" xmp-spc "*\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "template"                                              xmp-sep                            xmp-var       "(.*)" xmp-spc "*=" xmp-spc "*\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "distribute"   xmp-sep xmp-var "("       ".+" ")"       xmp-sep    "onto"    xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "\\(barrier\\|task\\|loop\\|array\\)"                   xmp-sep    "on"      xmp-sep "\\(" xmp-var "\\)") 2 xmp-variable-face t)
;    (,(concat (xmp-head xmp-start) "template_fix" xmp-sep         "("       ".+" ")"       xmp-sep                      "\\(" xmp-var "\\)") 1 xmp-variable-face t)
;    (,(concat (xmp-head xmp-start) "align"        xmp-sep xmp-var xmp-kakko ".+" xmp-kokka xmp-sep    "with"    xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "reduction"                    "("       ".+" ")"       xmp-sep    "on"      xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face t)
;    (,(concat (xmp-head xmp-start) "bcast"        xmp-sep         "("       ".+" ")"       xmp-sep    "from"    xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "bcast"        xmp-sep         "("       ".+" ")"       xmp-sep    "from"    xmp-sep       xmp-var       "(.+)" xmp-sep    "on"    xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "loop"         xmp-sep         "("       ".+" ")"       xmp-sep    "on"      xmp-sep "\\(" xmp-var "\\)"                                 ) 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "coarray"      xmp-sep xmp-var xmp-sep ":" xmp-sep             "\\[\\*\\]" xmp-sep    "on"    xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "coarray"      xmp-sep xmp-var xmp-sep ":" xmp-sep "\\[[0-9]+\\]\\[\\*\\]" xmp-sep    "on"    xmp-sep "\\(" xmp-var "\\)") 1 xmp-variable-face  t)
;    (,(concat (xmp-head xmp-start) "post"         xmp-sep "(" xmp-spc "*" "\\(" xmp-var "\\)") 1 xmp-variable-face t)
;    (,(concat (xmp-head xmp-start) "wait"         xmp-sep "(" xmp-spc "*" "\\(" xmp-var "\\)") 1 xmp-variable-face t)
;
    (,(concat "\\(xmp_" xmp-var "*\\)" xmp-spc "*(") 1 xmp-function-face  t)
    (,(concat (xmp-head xmp-start) "distribute" xmp-sep xmp-var "(") ("\\(block\\|cyclic\\|gblock\\)" nil nil (1 xmp-distribute-face t)))
    (,(concat (xmp-head xmp-start) "template_fix" xmp-sep "(")       ("\\(block\\|cyclic\\|gblock\\)" nil nil (1 xmp-distribute-face t)))
    (,(concat (xmp-head xmp-start) "reflect" xmp-sep "(" ".+" ")" xmp-sep "width" xmp-sep "(/") ("\\(periodic\\)" nil nil (1 xmp-distribute-face t)))
    )
  )

(setq xmp-directive-keybind-message
      '(
	("\C-cu"    xmp-insert-unlock "")
	("\C-clock" xmp-insert-lock "")
	("\C-cw"    xmp-insert-wait "")
	("\C-cp"    xmp-insert-post "")
	("\C-cloca" xmp-insert-local_alias "")
;	("\C-c\C-w"  xmp-insert-wait_async "")
	("\C-cbc"   xmp-insert-bcast "")
	("\C-cred"  xmp-insert-reduction "on")
	("\C-cba"   xmp-insert-barrier "on")
 	("\C-cg"    xmp-insert-gmove "")
 	("\C-cref"  xmp-insert-reflect "")
	("\C-csy"   xmp-insert-sync_memory "")
	("\C-cc"    xmp-insert-coarray "on")
	("\C-car"   xmp-insert-array "on")
	("\C-cloo"  xmp-insert-loop "on")
;	("\C-c\M-ta" xmp-insert-tasks "")
	("\C-cta"   xmp-insert-task "on")
;
	("\C-csh"   xmp-insert-shadow "")
	("\C-cal"   xmp-insert-align "with")
	("\C-cd"    xmp-insert-distribute "onto")
	("\C-cf"    xmp-insert-template_fix "")
	("\C-cte"   xmp-insert-template "")
	("\C-cn"    xmp-insert-nodes "")
 	)
      )

(defmacro xmp-make-function (xmp-insert-head)
  `(progn
     ,@(mapcar
	(lambda (x)
	  `(defun ,(car (cdr x)) ()
	     (interactive)
	     (insert (concat ,xmp-insert-head
			     ,(substring (symbol-name (car (cdr x))) 11 nil)
			     " "
			     ,(car (cdr (cdr x)))
			     )
		     )
	     )
	  )
	xmp-directive-keybind-message
	)
     )
  )


(defmacro xmp-add-function-to-menubar (mode-map mode-func)
  `(progn
     ,@(mapcar
	(lambda (x)
	  `(define-key ,mode-map [menu-bar ,mode-func ,(car (cdr x))] '(,(substring (symbol-name (car (cdr x))) 11 nil) . ,(car (cdr x))))
	  )
	xmp-directive-keybind-message
	)
     )
  )

(provide 'xmp-common)
